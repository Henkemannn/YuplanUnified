{
  "components": {
    "headers": {
      "X-Request-Id": {
        "description": "Echoed from request or generated by server; useful for log correlation.",
        "example": "f3a2b1f8-2e0e-4b12-9f4c-5c28a6a0c3a1",
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "Problem400": {
        "content": {
          "application/problem+json": {
            "examples": {},
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            }
          }
        },
        "description": "Problem 400",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/X-Request-Id"
          }
        }
      },
      "Problem401": {
        "content": {
          "application/problem+json": {
            "examples": {
              "invalid_token": {
                "value": {
                  "detail": "invalid_token",
                  "request_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                  "status": 401,
                  "title": "Unauthorized",
                  "type": "https://example.com/errors/unauthorized"
                }
              },
              "unauthorized": {
                "value": {
                  "detail": "unauthorized",
                  "request_id": "11111111-1111-1111-1111-111111111111",
                  "status": 401,
                  "title": "Unauthorized",
                  "type": "https://example.com/errors/unauthorized"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            }
          }
        },
        "description": "Problem 401",
        "headers": {
          "WWW-Authenticate": {
            "description": "Auth challenge (Bearer)",
            "schema": {
              "type": "string"
            }
          },
          "X-Request-Id": {
            "$ref": "#/components/headers/X-Request-Id"
          }
        }
      },
      "Problem403": {
        "content": {
          "application/problem+json": {
            "examples": {},
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            }
          }
        },
        "description": "Problem 403",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/X-Request-Id"
          }
        }
      },
      "Problem404": {
        "content": {
          "application/problem+json": {
            "examples": {},
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            }
          }
        },
        "description": "Problem 404",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/X-Request-Id"
          }
        }
      },
      "Problem409": {
        "content": {
          "application/problem+json": {
            "examples": {},
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            }
          }
        },
        "description": "Problem 409",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/X-Request-Id"
          }
        }
      },
      "Problem422": {
        "content": {
          "application/problem+json": {
            "examples": {
              "validation": {
                "value": {
                  "detail": "validation_error",
                  "errors": [
                    {
                      "field": "name",
                      "message": "required"
                    }
                  ],
                  "request_id": "22222222-2222-2222-2222-222222222222",
                  "status": 422,
                  "title": "Unprocessable Entity",
                  "type": "https://example.com/errors/validation_error"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            }
          }
        },
        "description": "Problem 422",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/X-Request-Id"
          }
        }
      },
      "Problem429": {
        "content": {
          "application/problem+json": {
            "examples": {
              "limited": {
                "value": {
                  "detail": "rate_limited",
                  "request_id": "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
                  "retry_after": 30,
                  "status": 429,
                  "title": "Too Many Requests",
                  "type": "https://example.com/errors/rate_limited"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            }
          }
        },
        "description": "Problem 429",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/X-Request-Id"
          }
        }
      },
      "Problem500": {
        "content": {
          "application/problem+json": {
            "examples": {
              "incident": {
                "value": {
                  "detail": "internal_error",
                  "incident_id": "33333333-3333-3333-3333-333333333333",
                  "request_id": "33333333-3333-3333-3333-333333333333",
                  "status": 500,
                  "title": "Internal Server Error",
                  "type": "https://example.com/errors/internal_error"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/ProblemDetails"
            }
          }
        },
        "description": "Problem 500",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/X-Request-Id"
          }
        }
      },
      "UnsupportedMediaType": {
        "description": "Unsupported Media Type"
      }
    },
    "schemas": {
      "AuditView": {
        "properties": {
          "actor_role": {
            "type": "string"
          },
          "actor_user_id": {
            "nullable": true,
            "type": "integer"
          },
          "event": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "payload": {
            "additionalProperties": true,
            "type": "object"
          },
          "request_id": {
            "type": "string"
          },
          "tenant_id": {
            "nullable": true,
            "type": "integer"
          },
          "ts": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImportErrorResponse": {
        "properties": {
          "error": {
            "enum": [
              "invalid",
              "unsupported",
              "rate_limited"
            ],
            "type": "string"
          },
          "limit": {
            "nullable": true,
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "ok": {
            "enum": [
              false
            ],
            "type": "boolean"
          },
          "retry_after": {
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "ok",
          "error",
          "message"
        ],
        "type": "object"
      },
      "ImportMenuRequest": {
        "properties": {
          "items": {
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ImportOkResponse": {
        "additionalProperties": false,
        "properties": {
          "diff": {
            "description": "Menu dry-run diff entries (menu only)",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "dry_run": {
            "description": "Legacy alias (deprecated); prefer meta.dry_run",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": false,
            "properties": {
              "count": {
                "type": "integer"
              },
              "dry_run": {
                "description": "Present and true when request used ?dry_run=1",
                "type": "boolean"
              },
              "format": {
                "description": "Detected import format",
                "enum": [
                  "csv",
                  "docx",
                  "xlsx",
                  "menu"
                ],
                "type": "string"
              }
            },
            "required": [
              "count"
            ],
            "type": "object"
          },
          "ok": {
            "enum": [
              true
            ],
            "type": "boolean"
          },
          "rows": {
            "items": {
              "$ref": "#/components/schemas/ImportRow"
            },
            "type": "array"
          }
        },
        "required": [
          "ok",
          "rows",
          "meta"
        ],
        "type": "object"
      },
      "ImportRow": {
        "properties": {
          "description": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "description",
          "priority"
        ],
        "type": "object"
      },
      "LimitDeleteRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "tenant_id": {
            "type": "integer"
          }
        },
        "required": [
          "tenant_id",
          "name"
        ],
        "type": "object"
      },
      "LimitMutationResponse": {
        "properties": {
          "item": {
            "$ref": "#/components/schemas/LimitView"
          },
          "ok": {
            "type": "boolean"
          },
          "removed": {
            "type": "boolean"
          },
          "updated": {
            "type": "boolean"
          }
        },
        "required": [
          "ok"
        ],
        "type": "object"
      },
      "LimitUpsertRequest": {
        "properties": {
          "name": {
            "type": "string"
          },
          "per_seconds": {
            "type": "integer"
          },
          "quota": {
            "type": "integer"
          },
          "tenant_id": {
            "type": "integer"
          }
        },
        "required": [
          "tenant_id",
          "name",
          "quota",
          "per_seconds"
        ],
        "type": "object"
      },
      "LimitView": {
        "properties": {
          "name": {
            "type": "string"
          },
          "per_seconds": {
            "type": "integer"
          },
          "quota": {
            "type": "integer"
          },
          "source": {
            "enum": [
              "tenant",
              "default",
              "fallback"
            ],
            "type": "string"
          },
          "tenant_id": {
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "name",
          "quota",
          "per_seconds",
          "source"
        ],
        "type": "object"
      },
      "Note": {
        "properties": {
          "content": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "private_flag": {
            "type": "boolean"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "user_id": {
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "id",
          "content",
          "private_flag"
        ],
        "type": "object"
      },
      "NoteCreate": {
        "properties": {
          "content": {
            "type": "string"
          },
          "private_flag": {
            "type": "boolean"
          }
        },
        "required": [
          "content"
        ],
        "type": "object"
      },
      "PageMeta": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "pages": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "page",
          "size",
          "total",
          "pages"
        ],
        "type": "object"
      },
      "PageResponse_AuditView": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AuditView"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/PageMeta"
          },
          "ok": {
            "type": "boolean"
          }
        },
        "required": [
          "ok",
          "items",
          "meta"
        ],
        "type": "object"
      },
      "PageResponse_LimitView": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/LimitView"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/PageMeta"
          },
          "ok": {
            "type": "boolean"
          }
        },
        "required": [
          "ok",
          "items",
          "meta"
        ],
        "type": "object"
      },
      "PageResponse_Notes": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Note"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/PageMeta"
          },
          "ok": {
            "type": "boolean"
          }
        },
        "required": [
          "ok",
          "items",
          "meta"
        ],
        "type": "object"
      },
      "PageResponse_Tasks": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Task"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/PageMeta"
          },
          "ok": {
            "type": "boolean"
          }
        },
        "required": [
          "ok",
          "items",
          "meta"
        ],
        "type": "object"
      },
      "ProblemDetails": {
        "additionalProperties": true,
        "description": "RFC7807 Problem Details (pilot). Extended with request_id, incident_id, errors[]",
        "properties": {
          "detail": {
            "type": "string"
          },
          "errors": {
            "description": "Validation issues (422)",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "incident_id": {
            "description": "Present only for 500 errors to correlate logs",
            "nullable": true,
            "type": "string"
          },
          "instance": {
            "format": "uri",
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "Correlation id echoed as X-Request-Id header",
            "type": "string"
          },
          "retry_after": {
            "description": "Rate limit reset seconds (429)",
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "type",
          "title",
          "status",
          "detail"
        ],
        "type": "object"
      },
      "Task": {
        "properties": {
          "assignee_id": {
            "nullable": true,
            "type": "integer"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "creator_user_id": {
            "nullable": true,
            "type": "integer"
          },
          "dish_id": {
            "nullable": true,
            "type": "integer"
          },
          "done": {
            "description": "Derived legacy boolean (status==\"done\"). Prefer using status for writes.",
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "type": "integer"
          },
          "menu_id": {
            "nullable": true,
            "type": "integer"
          },
          "private_flag": {
            "type": "boolean"
          },
          "status": {
            "description": "Authoritative state. On create/update maps to done=(status==done).",
            "enum": [
              "todo",
              "doing",
              "blocked",
              "done",
              "cancelled"
            ],
            "type": "string"
          },
          "task_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "unit_id": {
            "nullable": true,
            "type": "integer"
          },
          "updated_at": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "task_type",
          "done"
        ],
        "type": "object"
      },
      "TaskCreate": {
        "properties": {
          "private_flag": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "task_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "TaskStatus": {
        "enum": [
          "todo",
          "doing",
          "blocked",
          "done",
          "cancelled"
        ],
        "type": "string"
      },
      "TenantListResponse": {
        "properties": {
          "ok": {
            "type": "boolean"
          },
          "tenants": {
            "items": {
              "$ref": "#/components/schemas/TenantSummary"
            },
            "type": "array"
          }
        },
        "required": [
          "ok",
          "tenants"
        ],
        "type": "object"
      },
      "TenantSummary": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "features": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "integer"
          },
          "kind": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "active",
          "features"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "Problem Details (RFC7807) is the canonical error format across all endpoints. Legacy ErrorXXX components have been removed per ADR-003.",
    "title": "Unified Platform API",
    "version": "0.3.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/admin/audit": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "tenant_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "event",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Inclusive lower bound (RFC3339).",
            "in": "query",
            "name": "from",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Inclusive upper bound (RFC3339).",
            "in": "query",
            "name": "to",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Case-insensitive substring match on payload (stringified).",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "default": 20,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "sample": {
                    "value": {
                      "items": [
                        {
                          "actor_role": "admin",
                          "actor_user_id": 10,
                          "event": "limits_upsert",
                          "id": 2,
                          "payload": {
                            "limit_name": "exp",
                            "quota": 9
                          },
                          "request_id": "f3a2b1f8-2e0e-4b12-9f4c-5c28a6a0c3a1",
                          "tenant_id": 5,
                          "ts": "2025-10-05T12:02:00Z"
                        },
                        {
                          "actor_role": "admin",
                          "actor_user_id": 10,
                          "event": "limits_delete",
                          "id": 1,
                          "payload": {
                            "limit_name": "exp"
                          },
                          "request_id": "f3a2b1f8-2e0e-4b12-9f4c-5c28a6a0c3a1",
                          "tenant_id": 5,
                          "ts": "2025-10-05T12:00:00Z"
                        }
                      ],
                      "meta": {
                        "page": 1,
                        "pages": 1,
                        "size": 20,
                        "total": 2
                      },
                      "ok": true
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/PageResponse_AuditView"
                }
              }
            },
            "description": "Paged audit events (descending ts)",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/X-Request-Id"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "List audit events (paged, newest first)",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/feature_flags": {
      "get": {
        "parameters": [
          {
            "description": "Only superuser may specify",
            "in": "query",
            "name": "tenant_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flags listed"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "List tenant-scoped enabled feature flags",
        "tags": [
          "Features"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "tenant_id": {
                    "description": "Only for superuser",
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "enabled"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Flag updated"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Toggle tenant-scoped feature flag",
        "tags": [
          "Features"
        ]
      }
    },
    "/admin/flags/legacy-cook": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantListResponse"
                }
              }
            },
            "description": "Tenants with flag enabled"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "List tenants with allow_legacy_cook_create enabled",
        "tags": [
          "admin",
          "feature-flags"
        ]
      }
    },
    "/admin/limits": {
      "delete": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitDeleteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LimitMutationResponse"
                }
              }
            },
            "description": "Deleted (idempotent)"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Delete tenant override",
        "tags": [
          "admin"
        ]
      },
      "get": {
        "parameters": [
          {
            "description": "If provided include tenant overrides; omit to list only defaults",
            "in": "query",
            "name": "tenant_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Filter to a single limit name; if absent but tenant_id supplied returns union of defaults + overrides",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse_LimitView"
                }
              }
            },
            "description": "Paged limits"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Inspect effective rate limits (admin)",
        "tags": [
          "admin"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitUpsertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LimitMutationResponse"
                }
              }
            },
            "description": "Upserted"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "summary": "Create or update tenant override",
        "tags": [
          "admin"
        ]
      }
    },
    "/features": {
      "get": {
        "responses": {
          "200": {
            "description": "List flags"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Features"
        ]
      }
    },
    "/features/check": {
      "get": {
        "responses": {
          "200": {
            "description": "Flag state (unknown -> enabled=false)"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Features"
        ]
      }
    },
    "/features/set": {
      "post": {
        "responses": {
          "200": {
            "description": "Updated flag"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Features"
        ]
      }
    },
    "/import/csv": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportOkResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          }
        },
        "summary": "Import CSV file"
      }
    },
    "/import/docx": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportOkResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          }
        },
        "summary": "Import DOCX table"
      }
    },
    "/import/menu": {
      "post": {
        "parameters": [
          {
            "description": "If true (1) perform validation + diff only (no persistence)",
            "in": "query",
            "name": "dry_run",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "minimal": {
                  "summary": "Minimal valid payload",
                  "value": {
                    "items": [
                      {
                        "name": "Spaghetti Bolognese"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ImportMenuRequest"
              }
            },
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "dryRun": {
                    "value": {
                      "dry_run": true,
                      "meta": {
                        "count": 1,
                        "dry_run": true,
                        "format": "menu"
                      },
                      "ok": true,
                      "rows": [
                        {
                          "description": "Tomato",
                          "priority": 1,
                          "title": "Soup"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ImportOkResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          }
        },
        "summary": "Import weekly menu (dry-run supported)"
      }
    },
    "/import/xlsx": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "required": [
                  "file"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportOkResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "415": {
            "$ref": "#/components/responses/UnsupportedMediaType"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          }
        },
        "summary": "Import XLSX spreadsheet"
      }
    },
    "/notes/": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse_Notes"
                }
              }
            },
            "description": "Paged notes list"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Notes"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Create note"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Notes"
        ]
      }
    },
    "/notes/{id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Delete note"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Notes"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "Update note"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Notes"
        ]
      }
    },
    "/tasks/": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResponse_Tasks"
                }
              }
            },
            "description": "Paged tasks list"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Tasks"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created task"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/tasks/{id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Delete task"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Tasks"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Get task"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Tasks"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "Update task"
          },
          "400": {
            "$ref": "#/components/responses/Problem400"
          },
          "401": {
            "$ref": "#/components/responses/Problem401"
          },
          "403": {
            "$ref": "#/components/responses/Problem403"
          },
          "404": {
            "$ref": "#/components/responses/Problem404"
          },
          "409": {
            "$ref": "#/components/responses/Problem409"
          },
          "422": {
            "$ref": "#/components/responses/Problem422"
          },
          "429": {
            "$ref": "#/components/responses/Problem429"
          },
          "500": {
            "$ref": "#/components/responses/Problem500"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Auth"
    },
    {
      "name": "Menus"
    },
    {
      "name": "Features"
    },
    {
      "name": "System"
    },
    {
      "name": "Notes"
    },
    {
      "name": "Tasks"
    }
  ]
}